import telebot
from telebot import types
import os
import json
import random
from dotenv import load_dotenv
from logic_solver import solve_formula

user_sessions = {}  # chat_id: shuffled_questions_list
NUM_QUESTIONS = 5  # –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å

load_dotenv()
TOKEN = os.getenv('BOT_TOKEN')
bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
with open("questions.json", "r", encoding="utf-8") as f:
    test_questions = json.load(f)
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–æ—Ä–∏–∏
with open("theory.json", "r", encoding="utf-8") as f:
    THEORY = json.load(f)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_progress = {}

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üìã –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", "üìñ –¢–µ–æ—Ä–∏—è")
    markup.row("üß† –†–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É", "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ. –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìã –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
def handle_start_test_button(message):
    start_test(message)

@bot.message_handler(func=lambda m: m.text == "üìñ –¢–µ–æ—Ä–∏—è")
def send_theory(message):
    texts = [f"üìñ {title}:\n{content}" for title, content in THEORY.items()]
    bot.send_message(message.chat.id, "\n\n".join(texts))

@bot.message_handler(func=lambda m: m.text == "üß† –†–∞–∑–æ–±—Ä–∞—Ç—å —Ñ–æ—Ä–º—É–ª—É")
def ask_for_formula(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É:")
    bot.register_next_step_handler(msg, handle_formula)

def handle_formula(message):
    try:
        steps = solve_formula(message.text)
        bot.send_message(message.chat.id, "\n".join(steps))
    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞: {e}")

@bot.message_handler(func=lambda message: message.text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")
def handle_about(message):
    bot.send_message(message.chat.id, "üìå –õ–æ–≥–∏–∫–ë–æ—Ç ‚Äî —ç—Ç–æ Telegram-–±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –¥–∏—Å–∫—Ä–µ—Ç–Ω–æ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –∏ –∞–ª–≥–µ–±—Ä—ã –ª–æ–≥–∏–∫–∏. –û–Ω –ø–æ–¥–æ–π–¥—ë—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º, —à–∫–æ–ª—å–Ω–∏–∫–∞–º –∏ –≤—Å–µ–º, –∫—Ç–æ —Ö–æ—á–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–∞—Ö –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π.")



def prepare_question(q):
    options = q["options"][:]
    # –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    shuffled = options[:]
    random.shuffle(shuffled)
    # –Ω–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    correct_answer = q["options"][q["answer_index"]]
    new_answer_index = shuffled.index(correct_answer)
    # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å —Å –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ –Ω–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    return {
        "question": q["question"],
        "options": shuffled,
        "answer_index": new_answer_index,
        "explanation": q["explanation"]
    }

@bot.message_handler(commands=['test'])
def start_test(message):
    chat_id = message.chat.id
    user_progress[chat_id] = 0
    selected_questions = random.sample(test_questions, min(NUM_QUESTIONS, len(test_questions)))
    # –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞—ë–º –∫–æ–ø–∏—é —Å –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    user_sessions[chat_id] = [prepare_question(q) for q in selected_questions]
    bot.send_message(chat_id, f"üìã –¢–µ—Å—Ç –Ω–∞—á–∞—Ç! –í–æ–ø—Ä–æ—Å–æ–≤: {len(user_sessions[chat_id])}")
    send_question(chat_id)

def send_question(chat_id):
    index = user_progress.get(chat_id, 0)
    questions = user_sessions.get(chat_id, [])
    if index < len(questions):
        q = questions[index]
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        for option in q["options"]:
            markup.add(option)
        bot.send_message(chat_id, q["question"], reply_markup=markup)
    else:
        bot.send_message(chat_id, "‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –í–≤–µ–¥–∏ /test, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.", reply_markup=telebot.types.ReplyKeyboardRemove())
        user_progress.pop(chat_id, None)
        user_sessions.pop(chat_id, None)

@bot.message_handler(func=lambda message: message.chat.id in user_sessions)
def check_answer(message):
    chat_id = message.chat.id
    index = user_progress.get(chat_id, 0)
    questions = user_sessions.get(chat_id, [])
    if index < len(questions):
        q = questions[index]
        if message.text == q["options"][q["answer_index"]]:
            bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        else:
            correct = q["options"][q["answer_index"]]
            bot.send_message(chat_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")
        if q["explanation"]:
            bot.send_message(chat_id, f"üí° {q['explanation']}")
        user_progress[chat_id] += 1
        send_question(chat_id)

bot.infinity_polling()
